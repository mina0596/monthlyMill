<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.monthlyMill.smartstore.SmartstoreOrderMapper">
	<resultMap type="SmartStoreOrder"	id="SmartStoreOrderResultMap">
		<result property="idx"			column="idx"/>
		<result property="orderNum"			column="order_num"/>
		<result property="shippingDate"		column="shipping_date"/>
		<result property="paidDate"			column="paid_date"/>
		<result property="shippingMethod"			column="shipping_method"/>
		<result property="ordererName"		column="orderer_name"/>
		<result property="orderderPhone"		column="orderer_phone"/>
		<result property="receiverName"		column="receiver_name"/>
		<result property="receiverPhone"		column="receiver_phone"/>
		<result property="productName"		column="product_name"/>
		<result property="productCode"		column="product_code"/>
		<result property="detailedProduct"		column="detailed_product"/>
		<result property="orderQuantity"		column="order_quantity"/>
		<result property="totOrderAmount"		column="total_order_amount"/>
		<result property="option"		column="option_info"/>
		<result property="shippingFee"		column="shipping_fee"/>
		<result property="shippingAddr"		column="shipping_addr"/>
		<result property="deliveryMsg"		column="delivery_msg"/>
		<result property="expDeliveryDate"		column="exp_delivery_date"/>
		<result property="regDate"		column="reg_date"/>
		<result property="regMId"		column="reg_m_id"/>
		<result property="orderType"		column="order_type"/>
		<result property="productionComp"		column="production_complete"/>
		<result property="shippingPayCheck"		column="shipping_pay_check"/>
		<result property="memo"		column="memo"/>
		<result property="modifiedCheck"		column="modified_check"/>
	</resultMap>
	
	<!-- ====== 모든 주문 조회 ====== -->
	<select id="getAllOrderInfo" resultMap="SmartStoreOrderResultMap">
		SELECT 
			idx, order_num, shipping_date, paid_date, shipping_method, orderer_name, orderer_phone, receiver_name, receiver_phone, product_name, product_code, detailed_product, order_quantity, total_order_amount, option_info, 
			shipping_fee, shipping_addr, delivery_msg, exp_delivery_date, reg_date, reg_m_id, order_type, 
			production_complete, shipping_pay_check, memo, modified_check
		FROM 
			smartstore_order_info
		ORDER BY DATE_FORMAT(LEFT(exp_delivery_date, 10), '%Y-%m-%d') DESC
	</select>
	
	<!-- 수정테이블에 있는 주문테이블idx 번호 가져오기  -->
	<select id="getModifiedOrderIdx" resultType="integer">
		SELECT 
			modOrder.order_idx AS orderIdx
		FROM 
			smartstore_modify_order AS modOrder
	</select>
	
	<!-- ====== 날짜별로 주문 조회 ====== -->
	<select id="getOrderInfoByDate" resultType="map" parameterType="String">
		SELECT
			sub.*
		from
			(SELECT
				m.order_idx AS orderIdx, m.order_num AS orderNum, m.shipping_date AS shippingDate,
				m.paid_date AS paidDate, m.shipping_method AS shippingMethod, m.orderer_name AS ordererName,
				m.orderer_phone AS orderderPhone, m.receiver_name AS receiverName, m.receiver_phone AS receiverPhone,
				m.product_name AS productName, m.product_code AS productCode, m.detailed_product AS detailedProduct,
				m.order_quantity AS orderQuantity, m.tot_order_amount AS totOrderAmount, m.option_info AS 'option',
				m.shipping_fee AS shippingFee, m.shipping_addr AS shippingAddr, m.delivery_msg AS deliveryMsg,
				m.exp_delivery_date AS expDeliveryDate, m.order_type AS orderType, m.production_complete AS productionComp,
				m.shipping_pay_check AS shippingPayCheck, m.memo AS memo
			FROM
				smartstore_modify_order AS m
			UNION
			SELECT 
				o.idx AS orderIdx, o.order_num AS orderNum, o.shipping_date AS shippingDate,
				o.paid_date AS paidDate, o.shipping_method AS shippingMethod, o.orderer_name AS ordererName,
				o.orderer_phone AS orderderPhone, o.receiver_name AS receiverName, o.receiver_phone AS receiverPhone,
				o.product_name AS productName, o.product_code AS productCode, o.detailed_product AS detailedProduct,
				o.order_quantity AS orderQuantity, o.total_order_amount AS totOrderAmount, o.option_info AS 'option',
				o.shipping_fee AS shippingFee, o.shipping_addr AS shippingAddr, o.delivery_msg AS deliveryMsg,
				o.exp_delivery_date AS expDeliveryDate, o.order_type AS orderType, o.production_complete AS productionComp,
				o.shipping_pay_check AS shippingPayCheck, o.memo AS memo
			FROM 
				smartstore_order_info AS o
			WHERE 
				o.modified_check = 'N') AS sub
		WHERE sub.expDeliveryDate LIKE CONCAT ('%', '2021-12-15', '%');
	</select>
	
	
	<!-- ====== 주문 등록 ====== -->
	<insert id="addOrder" parameterType="SmartStoreOrder">
		INSERT INTO smartstore_order_info
			(idx, order_num, shipping_date, paid_date, shipping_method, orderer_name, orderer_phone, receiver_name, receiver_phone, product_name, 
			product_code, detailed_product, order_quantity, total_order_amount, option_info, shipping_fee, shipping_addr, delivery_msg, exp_delivery_date, reg_date, 
			reg_m_id, order_type, production_complete, shipping_pay_check, memo, modified_check)
		VALUES 
			(NULL, #{orderNum}, #{shippingDate}, #{paidDate}, #{shippingMethod}, #{ordererName}, #{orderderPhone}, #{receiverName}, #{receiverPhone}, #{productName},
			#{productCode}, #{detailedProduct}, #{orderQuantity}, #{totOrderAmount}, #{option}, #{shippingFee}, #{shippingAddr}, #{deliveryMsg}, #{expDeliveryDate}, NOW(), 
			#{regMId}, #{orderType}, NULL, NULL, NULL, 'N')
	</insert>
	
	
	
	<!-- ====== 주문번호 가져오기 ====== -->
	<select id="getOrderSequence" resultType="String">
		SELECT 
			if(COUNT(0)=0, '001', LPAD(cast(substring(MAX(o.order_num), 9, 11) as decimal)+1,3,0))
		FROM 
			smartstore_order_info AS o
		WHERE 
			DATE_format(o.reg_date, '%Y-%m-%d') = CURDATE();
	</select>
	
	<!-- 주문에 대한 정보 수정 -->
	<insert id="updateOrderInfo" parameterType="map">
		INSERT INTO smartstore_modify_order
			(idx, order_idx, order_num, shipping_date, paid_date, shipping_method, 
			orderer_name, orderer_phone, receiver_name, receiver_phone, product_name, 
			product_code, detailed_product, order_quantity, tot_order_amount, option_info, shipping_fee, shipping_addr, delivery_msg, exp_delivery_date, order_type, 
			production_complete, shipping_pay_check, memo, modified_date, modified_m_id)
		VALUES 
			(NULL, #{orderIdx}, #{orderNum}, #{shippingDate}, #{paidDate}, #{shippingMethod}, 
			#{ordererName}, #{ordererPhone}, #{receiverName}, #{receiverPhone}, #{productName}, 
			#{productCode}, #{detailedProduct}, #{orderQuantity}, #{totOrderAmount}, #{option}, #{shippingFee}, #{shippingAddr}, #{deliveryMsg}, #{expDeliveryDate}, #{orderType}, 
			#{productionComp}, #{shippingPayCheck}, #{memo}, NOW(), #{modMId});
	
	</insert>
	
	
	
	<!--  생산일지 내용 가져오기 -->
	<select id="getProductionInfo" parameterType="String" resultType="map">
		SELECT
			o.idx AS orderIdx,
			o.order_num AS orderNum,
			o.paid_date AS paidDate,
			o.receiver_name AS receiverName,
			o.production_complete AS productionComp,
			o.shipping_pay_check AS shippingPayCheck,
			o.shipping_addr As shippingAddr,
			o.product_name AS productName,
			o.product_code AS productCode,
			o.order_quantity AS orderQuantity,
			o.exp_delivery_date AS expDeliveryDate,
			o.memo AS memo,
			p.wrapping_type AS wrappingType,
			p.item_01 AS item01, p.item_02 AS item02, p.item_03 AS item03, p.item_04 AS item04,
			p.item_05 AS item05, p.item_06 AS item06, p.item_07 AS item07, p.item_08 AS item08,
			p.item_09 AS item09, p.item_10 AS item10, p.item_11 AS item11, p.item_12 AS item12,
			p.item_13 AS item13, p.item_14 AS item14, p.item_15 AS item15, p.item_16 AS item16,
			p.item_17 AS item17, p.item_18 AS item18, p.item_19 AS item19
		FROM
			smartstore_order_info AS o
			INNER join
			smartstore_product_info AS p
			on o.product_code = p.product_code
			WHERE exp_delivery_date LIKE CONCAT ('%', #{expDate}, '%');
	</select>
	
	
	<!-- 생산일지에서 날짜별 생산해야할 각각의 품목 수 -->
	<select id="getItemsTotal" parameterType="String" resultType="map">
		SELECT
			sum(sub.item01) AS item01total, sum(sub.item02) AS item02total,
			sum(sub.item03) AS item03total, sum(sub.item04) AS item04total,
			sum(sub.item05) AS item05total, sum(sub.item06) AS item06total,
			sum(sub.item07) AS item07total, sum(sub.item08) AS item08total,
			sum(sub.item09) AS item09total, sum(sub.item10) AS item10total,
			sum(sub.item11) AS item11total, sum(sub.item12) AS item12total,
			sum(sub.item13) AS item13total, sum(sub.item14) AS item14total,
			sum(sub.item15) AS item15total, sum(sub.item16) AS item16total,
			sum(sub.item17) AS item17total, sum(sub.item18) AS item18total,
			sum(sub.item19) AS item19total
		from
			(SELECT
				p.item_01 AS item01, p.item_02 AS item02, p.item_03 AS item03, p.item_04 AS item04,
				p.item_05 AS item05, p.item_06 AS item06, p.item_07 AS item07, p.item_08 AS item08,
				p.item_09 AS item09, p.item_10 AS item10, p.item_11 AS item11, p.item_12 AS item12,
				p.item_13 AS item13, p.item_14 AS item14, p.item_15 AS item15, p.item_16 AS item16,
				p.item_17 AS item17, p.item_18 AS item18, p.item_19 AS item19
			FROM
				smartstore_order_info AS o
				INNER join
				smartstore_product_info AS p
				on o.product_code = p.product_code
				WHERE exp_delivery_date LIKE CONCAT ('%', #{expDate}, '%')) AS sub;
	</select>
	
	
	<!-- 주문테이블 idx로 주문정보 가져오기 -->
	<select id="getOrderInfoByIdx" parameterType="int" resultMap="SmartStoreOrderResultMap">
			SELECT
				o.*
			FROM
				smartstore_order_info AS o
			WHERE o.idx = #{orderIdx}
	</select>
	
</mapper>