<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="project.monthlyMill.customer.order.OrderMapper">
	<resultMap type="Order"	id="orderResultMap">
		<result property="idx"					column="idx"/>
		<result property="orderNum"				column="order_num"/>
		<result property="memberId"				column="member_num"/>
		<result property="pCode"				column="product_code"/>
		<result property="pCount"				column="product_code"/>
		<result property="matchingCheck"		column="matching_check"/>
		<result property="makerId"				column="matched_maker_id"/>
		<result property="matchingNum"			column="matching_num"/>
		<result property="refundCheck"			column="refund_check"/>
		<result property="orderDate"			column="order_date"/>
		<result property="totalProductPrice"	column="total_product_price"/>
		<result property="shippingMethod"		column="shipping_method"/>
		<result property="actualShippingFee"	column="actual_shipping_fee"/>
		<result property="mPaidShippingFee"		column="m_paid_shipping_fee"/>
		<result property="discountCheck"		column="discount_check"/>
		<result property="totalDiscountAmount"	column="total_discounted_amount"/>
		<result property="discountMethod"		column="discount_method"/>
		<result property="couponNum"			column="coupon_num"/>
		<result property="paymentCheck"			column="payment_check"/>
		<result property="paymentAmount"		column="payment_amount"/>
		<result property="paymentDate"			column="payment_date"/>
		<result property="orderModifyDate"		column="order_modify_date"/>
		<result property="orderRegDate"			column="order_reg_date"/>
		<result property="cancelCheck"			column="cancel_check"/>
		<result property="memo"					column="memo"/>
	</resultMap>
	
	<select id="selectOrderSequence" resultType="String" parameterType="int">
		SELECT
			if(COUNT(0)=0, '0001', LPAD(cast(substring(MAX(oi.order_num), 11, 14) as decimal)+1,4,0))
		FROM
			order_info AS oi
			where
				oi.order_reg_date = CURDATE();
	</select>
	
	
	<!-- 주문매칭 신청했을때 주문 등록
		 신청했을때는 'cancel_check' 컬럼이 'N' 로 들어가있고, 완전히 매칭 확인까지 했을 경우에만 'Y'로 update 된다.
	  -->
	<insert id="addOrder" parameterType="Order">
		INSERT INTO order_info
			(idx, order_num, member_id, product_code, product_count, matching_check, matched_maker_id, matching_num, refund_check, order_date, total_product_price, shipping_method, actual_shipping_fee, m_paid_shipping_fee,
			 discount_check, total_discounted_amount, discount_method, coupon_num, payment_check, payment_amount, payment_date, order_modify_date, order_reg_date, cancel_check, memo)
		VALUES (NULL, #{orderNum}, #{memberId}, #{pCode}, #{pCount}, 'N', NULL, NOW(), NOW(), 'N', NULL, NULL, 'N', CURDATE(), #{totalPrice}, #{shippingMethod}, NULL, #{shippingFee}, 
			'N', #{discountAmount}, NULL, NULL, 'N', NULL, NULL, CURDATE(), CURDATE(), 'Y', NULL)
	</insert>
	
	<update id="confirmOrder" parameterType="String">
		UPDATE order_info AS oi
		SET
			oi.cancel_check='N'
		WHERE oi.order_num = #{orderNum}
	</update>
	
	
	<!--  입금확인되면 update됨 -->
	<update id="updatePaymentConfirm" parameterType="int">
		UPDATE order_info
		SET
			payment_check='Y',
			order_modify_date=CURDATE()
		WHERE member_id=#{memberId} 
		and payment_check='N';
	</update>
	<!-- 
	<delete id="deleteFromCart" parameterType="">
	
	</delete>
	 -->
	
	<select id="getOrderListByMemberId" parameterType="String" resultType="map">
		SELECT o.idx, o.order_num AS orderNum, o.product_code, 
			o.product_count AS pCount, 
			o.order_date, 
			order_reg_date AS orderRegDate,
			p.product_name AS pName,
			p.product_price AS pPrice
		FROM 
			order_info AS o
		INNER join
			product_info AS p
		ON 
			o.product_code = p.product_code
		WHERE member_id = #{memberId}
		and o.cancel_check = 'N';
	</select>
	
	<select id="getOrderNumByMemberId" parameterType="String" resultType="map">
		SELECT
			DISTINCT(o.order_num) AS orderNum,
			o.order_reg_date AS orderRegDate
		FROM
			order_info AS o
			where
			o.member_id = #{memberId} 
			and
			o.cancel_check = 'N';
	</select>
	
	<select id="getOrderByOrderNum" parameterType="String" resultType="map">
		SELECT 
			o.order_num AS orderNum, 
			m.member_name AS mName,
			m.member_phone AS mPhone,
			p.product_name AS pName,
			o.product_count AS pCount,
			p.product_price AS pPrice
		FROM 
			order_info AS o
		INNER join
			member_basic_info AS m
			on
			o.member_id = m.member_id
		INNER join
			product_info AS p
			on
			o.product_code = p.product_code
		WHERE o.order_num = #{orderNum};
	</select>
	
	<insert id="addCancelRequest" parameterType="map">
		INSERT INTO order_cancel
			(idx, order_num, requested_member_id, cancel_reason, detail_reason, total_refund_price, refund_method, approval_check, approved_date, requested_date, approved_member_num)
		VALUES 
			(NULL, #{orderNum}, #{memberId}, #{cancelReason}, #{cancelDetailReason}, #{refundPrice}, '무통장 입금', 'N', NOW(), NOW(), null);
	</insert>
	
	<update id="updateCancelCheck" parameterType="String">
		UPDATE order_info
			SET
				cancel_check='Y'
			WHERE order_num=#{orderNum}
	</update>
	
	
	<select id="getCancelListByMemberId" parameterType="String" resultType="map">
		SELECT 
			sub.orderNum AS orderNum,
			sub.requestedDate AS requestedDate,
			p.product_name AS pName,
			o.product_count AS pCount,
			p.product_price AS pPrice
		FROM
				(SELECT 
			c.order_num AS orderNum,
			c.requested_date AS requestedDate
			FROM
			order_cancel_info AS c
			where
			c.requested_member_id = #{memberId}
			GROUP BY orderNum) AS sub
			INNER join
			order_info AS o
			on
			sub.orderNum = o.order_num
			INNER join
			product_info AS p
			on
			o.product_code = p.product_code
	</select>
	
	<select id="getCanceledOrderNum" parameterType="String" resultType="map">
		SELECT 
			c.order_num AS orderNum,
			c.requested_date AS requestedDate
		FROM
			order_cancel_info AS c
			where
			c.requested_member_id = #{memberId}
			GROUP BY orderNum
	</select>
	
	
	<!-- **********************************배송에 대한 정보 ******************************* -->
	<resultMap type="Shipment"	id="shipmentResultMap">
		<result property="idx"					column="idx"/>
		<result property="orderNum"				column="order_num"/>
		<result property="shippingMethod"				column="shipping_method"/>
		<result property="shippingFee"				column="shipping_fee"/>
		<result property="receiverName"				column="receiver_name"/>
		<result property="receiverPhoneNum"				column="receiver_phone"/>
		<result property="receiverHomeNum"			column="receiver_home"/>
		<result property="receiverPostalCode"			column="receiver_postal_code"/>
		<result property="receiverAddr"			column="receiver_addr"/>
		<result property="receiverDetailAddr"	column="receiver_detail_addr"/>
		<result property="expDelDate"		column="expected_delivery_date"/>
		<result property="filedDate"	column="shipping_filed_date"/>
		<result property="shippedDate"		column="shipped_date"/>
	</resultMap>
	
	
	<!-- 매칭신청시 배송정보 등록 -->
	<insert id="addOrderShipInfo" parameterType="Shipment">
		INSERT INTO shipping_info
			(idx, order_num, shipping_method, shipping_fee, receiver_name, receiver_phone, receiver_home, receiver_postal_code, receiver_addr, receiver_detail_addr, expected_delivery_date, shipping_filed_date, shipped_date)
		VALUES (NULL, #{orderNum}, #{shippingMethod}, #{shippingFee}, #{receiverName}, #{receiverPhoneNum}, #{receiverHomeNum}, #{receiverPostalCode}, #{receiverAddr}, #{receiverDetailAddr}, #{expDelDate}, NULL, NULL)
	</insert>
	
	
	
</mapper>